---
- name: Install and configure Kubernetes components
  hosts: all
  become: yes
  tasks:

    - name: Enable IP forwarding
      ansible.builtin.copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.ipv4.ip_forward = 1
      notify: Reload sysctl

    - name: Apply sysctl changes
      ansible.builtin.command: sysctl --system
      changed_when: false

    - name: Ensure dependencies are installed
      ansible.builtin.apt:
        name:
          - wget
          - curl
          - apt-transport-https
          - ca-certificates
          - gpg
        state: present

    - name: Download containerd
      ansible.builtin.get_url:
        url: "https://github.com/containerd/containerd/releases/download/v2.0.0/containerd-2.0.0-linux-amd64.tar.gz"
        dest: "/tmp/containerd.tar.gz"
        mode: '0644'

    - name: Extract containerd
      ansible.builtin.unarchive:
        src: "/tmp/containerd.tar.gz"
        dest: "/usr/local"
        remote_src: yes

    - name: Download runc
      ansible.builtin.get_url:
        url: "https://github.com/opencontainers/runc/releases/download/v1.2.1/runc.amd64"
        dest: "/tmp/runc.amd64"
        mode: '0755'

    - name: Install runc
      ansible.builtin.command: install -m 755 /tmp/runc.amd64 /usr/local/sbin/runc
      args:
        creates: /usr/local/sbin/runc

    - name: Download CNI plugins
      ansible.builtin.get_url:
        url: "https://github.com/containernetworking/plugins/releases/download/v1.6.0/cni-plugins-linux-amd64-v1.6.0.tgz"
        dest: "/tmp/cni-plugins.tgz"
        mode: '0644'
    - name: Ensure CNI binary directory exists
      file:
        path: /opt/cni/bin
        state: directory
        mode: '0755'

    - name: Extract CNI plugins
      ansible.builtin.unarchive:
        src: "/tmp/cni-plugins.tgz"
        dest: "/opt/cni/bin"
        remote_src: yes
        extra_opts: [--strip-components=1]
        creates: "/opt/cni/bin"

    - name: Create containerd configuration directory
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Generate default containerd config
      ansible.builtin.command: containerd config default
      register: containerd_config
      changed_when: false

    - name: Configure containerd
      ansible.builtin.copy:
        dest: /etc/containerd/config.toml
        content: "{{ containerd_config.stdout | regex_replace('SystemdCgroup = false', 'SystemdCgroup = true') }}"
        mode: '0644'
      notify: Restart containerd

    - name: Download containerd systemd service
      ansible.builtin.get_url:
        url: "https://raw.githubusercontent.com/containerd/containerd/main/containerd.service"
        dest: "/etc/systemd/system/containerd.service"
        mode: '0644'

    - name: Reload systemd and enable containerd
      ansible.builtin.systemd:
        name: containerd
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Add Kubernetes apt repository key
      ansible.builtin.shell:
        cmd: "curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg"
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes repository
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list.d/kubernetes.list
        line: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /"
        create: yes

    - name: Install Kubernetes packages
      ansible.builtin.apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes
      retries: 5
      delay: 10
      register: result
      until: result is success

    - name: Hold Kubernetes packages
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Enable kubelet service
      ansible.builtin.systemd:
        name: kubelet
        enabled: yes
        state: started

  handlers:
    - name: Reload sysctl
      ansible.builtin.command: sysctl --system
      changed_when: false

    - name: Restart containerd
      ansible.builtin.systemd:
        name: containerd
        state: restarted

- name: Initialize Kubernetes Master
  hosts: control-plane1
  become: yes
  tasks:
    
    - name: Initialize kubeadm
      ansible.builtin.command: kubeadm init --pod-network-cidr=192.168.0.0/16
      args:
        creates: /etc/kubernetes/admin.conf

    - name: Generate join command
      ansible.builtin.command: kubeadm token create --print-join-command
      register: join_command
      changed_when: false

    - name: Save join command to a file
      ansible.builtin.copy:
        content: "{{ join_command.stdout }}"
        dest: "/tmp/join_command.txt"
        mode: '0644'

    - name: Ensure .kube directory exists
      ansible.builtin.file:
        path: /home/ubuntu/.kube
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Copy kubeconfig file
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        remote_src: yes
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    - name: Set KUBECONFIG environment variable in .bashrc
      ansible.builtin.lineinfile:
        path: /home/ubuntu/.bashrc
        line: 'export KUBECONFIG=/home/ubuntu/.kube/config'
        create: yes
        state: present

    - name: Download Calico manifest if not exists
      ansible.builtin.get_url:
        url: "https://raw.githubusercontent.com/projectcalico/calico/v3.29.2/manifests/calico.yaml"
        dest: "/home/ubuntu/calico.yaml"
        mode: '0644'

    - name: Apply Calico network plugin
      ansible.builtin.command: kubectl apply -f /home/ubuntu/calico.yaml
      become_user: ubuntu
      args:
        creates: /etc/cni/net.d/calico-kubeconfig

    - name: Clone kubectx repository
      ansible.builtin.git:
        repo: "https://github.com/ahmetb/kubectx.git"
        dest: "/opt/kubectx"
        version: "master"

    - name: Create symbolic links for kubectx and kubens
      ansible.builtin.file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        state: link
      loop:
        - { src: "/opt/kubectx/kubectx", dest: "/usr/local/bin/kubectx" }
        - { src: "/opt/kubectx/kubens", dest: "/usr/local/bin/kubens" }

    - name: Download and install k9s if not installed
      ansible.builtin.shell: curl -sS https://webinstall.dev/k9s | bash
      args:
        creates: /usr/local/bin/k9s

    - name: Add alias for kubectl in .bashrc
      ansible.builtin.lineinfile:
        path: /home/ubuntu/.bashrc
        line: "alias k='kubectl'"
        create: yes
        state: present
        
    - name: Source .bashrc to apply the alias
      ansible.builtin.shell:
        cmd: "source /home/ubuntu/.bashrc"
        executable: /bin/bash
        creates: /home/ubuntu/.bashrc

    - name: Ensure .kube directory exists
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: '0755'
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_env.USER }}"

    - name: Copy Kubernetes admin.conf to kubeconfig
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        remote_src: yes
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_env.USER }}"
        mode: '0644'

    - name: Apply Metrics Server manifest
      ansible.builtin.command: >
        kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

    - name: Patch Metrics Server Deployment
      ansible.builtin.command: >
        kubectl patch deployment metrics-server -n kube-system
        --type='json' -p='[
          {
            "op": "add",
            "path": "/spec/template/spec/containers/0/args/-",
            "value": "--kubelet-insecure-tls"
          }
        ]'

- name: Join Nodes
  hosts: nodes
  become: yes
  tasks:
    - name: Check if the node is already part of the cluster
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf

    - name: Fetch join command from control node
      ansible.builtin.slurp:
        src: "/tmp/join_command.txt"
      delegate_to: localhost
      run_once: true
      register: join_command_file
      when: not kubelet_conf.stat.exists

    - name: Convert join command to string
      ansible.builtin.set_fact:
        join_command: "{{ join_command_file['content'] | b64decode | trim }}"
      when: not kubelet_conf.stat.exists

    - name: Join Kubernetes cluster
      ansible.builtin.command: "{{ join_command }}"
      when: not kubelet_conf.stat.exists

